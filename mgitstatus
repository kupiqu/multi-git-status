#!/bin/bash

# MIT license

C_RED="$(tput setaf 1)"
C_YELLOW="$(tput setaf 3)"
C_BLUE="$(tput setaf 4)"
C_CYAN="$(tput setaf 6)"
C_WHITE="$(tput setaf 7)"
C_GREEN="$(tput setaf 2)"
C_MAGENTA="$(tput setaf 5)"
C_RESET="$(tput sgr0)"

C_NEEDS_PULL="$C_RED"
C_UNTRACKED="$C_MAGENTA"
C_NEEDS_COMMIT="$C_YELLOW"
C_NEEDS_PUSH="$C_BLUE"
C_OK="$C_GREEN"

DEBUG=0

if [ "$1" = "--help" ]; then
    echo
    echo "Scan for .git dirs and show git status"
    echo
    echo "Usage: $0 [-w] [DIR] [DEPTH=2]" >&2
    echo
    echo "If no argument is given, it uses 'locate' command"
    echo
    echo "Otherwise it uses 'find' command under 'DIR' (up to 'DEPTH' dirs deep)"
    echo
    echo "In such case, '-w' warns about dirs that are not Git repositories"
    exit 1
fi

WARN_NOT_REPO=0
if [ "$1" = "-w" ]; then
    WARN_NOT_REPO=1
    shift
fi

if [ -z "$1" ]; then
    # ROOT_DIR="."
    # Using locate to automatically find all .git dirs in database
    DIR_LIST=$(locate -Lbr '\.git$'  | rev | cut -c 6- | rev)
else
    ROOT_DIR=$1
    if [ -z "$2" ]; then
        DEPTH=2
    else
        DEPTH=$2
    fi
    # Find all dirs, up to DEPTH levels deep
    DIR_LIST=$(find -L $ROOT_DIR -maxdepth $DEPTH -type d | sort)
fi

IFS=$'\n'
for PROJ_DIR in $DIR_LIST; do

    GIT_DIR="$PROJ_DIR/.git"

    if [ ! -z "$1" ]; then
        # Skip '.' and '..'
        [ "$PROJ_DIR" = "." -o "$GIT_DIR" = ".." ] && continue
        # If this dir is not a repo, and WARN_NOT_REPO is 1, tell the user.
        if [ \! -d "$GIT_DIR" ]; then
            if [ "$WARN_NOT_REPO" -eq 1 ]; then
                printf "${PROJ_DIR} Not a git repo\n"
            fi
            continue
        fi
    fi

    printf "${PROJ_DIR} "

    [ $DEBUG -eq 1 ] && echo

    # Refresh the index, or we might get wrong results.
    git --work-tree $(dirname "$GIT_DIR") --git-dir "$GIT_DIR" update-index -q --refresh >/dev/null 2>&1

    # Find all remote branches that have been checked out and figure out if
    # they need a push or pull. We do this with various tests and put the name
    # of the branches in NEEDS_XXXX, seperated by newlines. After we're done,
    # we remove duplicates from NEEDS_XXX.
    NEEDS_PUSH_BRANCHES=""
    NEEDS_PULL_BRANCHES=""

    for REF_HEAD in $(ls "$GIT_DIR"/refs/heads); do
        # Check if this branch is tracking a remote branch
        TRACKING_REMOTE=$(git --git-dir "$GIT_DIR" rev-parse --abbrev-ref --symbolic-full-name $REF_HEAD@{u} 2>/dev/null)
        if [ $? -eq 0 ]; then
            # Branch is tracking a remote branch. Find out how much behind /
            # ahead it is of that remote branch.
            CNT_AHEAD_BEHIND=$(git --git-dir "$GIT_DIR" rev-list --left-right --count $REF_HEAD...$TRACKING_REMOTE)
            CNT_AHEAD=$(echo $CNT_AHEAD_BEHIND | awk '{ print $1 }')
            CNT_BEHIND=$(echo $CNT_AHEAD_BEHIND | awk '{ print $2 }')

            [ $DEBUG -eq 1 ] && echo CNT_AHEAD_BEHIND: $CNT_AHEAD_BEHIND
            [ $DEBUG -eq 1 ] && echo CNT_AHEAD: $CNT_AHEAD
            [ $DEBUG -eq 1 ] && echo CNT_BEHIND: $CNT_BEHIND

            if [ $CNT_AHEAD -gt 0 ]; then
                NEEDS_PUSH_BRANCHES="${NEEDS_PUSH_BRANCHES}\n$REF_HEAD"
            fi
            if [ $CNT_BEHIND -gt 0 ]; then
                NEEDS_PULL_BRANCHES="${NEEDS_PULL_BRANCHES}\n$REF_HEAD"
            fi
        else
            # FIXME: Non-tracking branches might need a remote for pushing?
            :
        fi

        REV_LOCAL=$(git --git-dir "$GIT_DIR" rev-parse --verify $REF_HEAD 2>/dev/null)
        REV_REMOTE=$(git --git-dir "$GIT_DIR" rev-parse --verify origin/$REF_HEAD 2>/dev/null)
        REV_BASE=$(git --git-dir "$GIT_DIR" merge-base $REF_HEAD origin/$REF_HEAD 2>/dev/null)

        [ $DEBUG -eq 1 ] && echo REV_LOCAL: $REV_LOCAL
        [ $DEBUG -eq 1 ] && echo REV_REMOTE: $REV_REMOTE
        [ $DEBUG -eq 1 ] && echo REV_BASE: $REV_BASE

        if [ "$REV_LOCAL" = "$REV_REMOTE" ]; then
            : # NOOP
        else
            if [ "$REV_LOCAL" = "$REV_BASE" ]; then
                NEEDS_PULL_BRANCHES="${NEEDS_PULL_BRANCHES}\n$REF_HEAD"
            fi
            if [ "$REV_REMOTE" = "$REV_BASE" ]; then
                NEEDS_PUSH_BRANCHES="${NEEDS_PUSH_BRANCHES}\n$REF_HEAD"
            fi
        fi
    done

    # Remove duplicates from NEEDS_XXXX and make comma-seperated
    NEEDS_PUSH_BRANCHES=$(printf "$NEEDS_PUSH_BRANCHES" | sort | uniq | tr '\n' ',' | sed "s/^,\(.*\),$/\1/")
    NEEDS_PULL_BRANCHES=$(printf "$NEEDS_PULL_BRANCHES" | sort | uniq | tr '\n' ',' | sed "s/^,\(.*\),$/\1/")

    # Find out if there are uncomitted changes
    UNSTAGED=$(git --work-tree $(dirname "$GIT_DIR") --git-dir "$GIT_DIR" diff-index --quiet HEAD --; echo $?)
    UNCOMMITTED=$(git --work-tree $(dirname "$GIT_DIR") --git-dir "$GIT_DIR" diff-files --quiet --ignore-submodules --; echo $?)

    # Find out if there are untracked changes
    UNTRACKED=$(git --work-tree $(dirname "$GIT_DIR") --git-dir "$GIT_DIR" ls-files --exclude-standard --others)

    # Build up the status string
    STATUS_NEEDS=""
    if [ \! -z "$NEEDS_PULL_BRANCHES" ]; then
        STATUS_NEEDS="${STATUS_NEEDS}${C_NEEDS_PULL}Needs pull($NEEDS_PULL_BRANCHES)${C_RESET} "
    fi
    if [ "$UNTRACKED" != "" ]; then
        STATUS_NEEDS="${STATUS_NEEDS}${C_UNTRACKED}Untracked files${C_RESET} "
    fi
    if [ "$UNSTAGED" -ne 0 -o "$UNCOMMITTED" -ne 0 ]; then
        STATUS_NEEDS="${STATUS_NEEDS}${C_NEEDS_COMMIT}Uncommitted changes${C_RESET} "
    fi
    if [ \! -z "$NEEDS_PUSH_BRANCHES" ]; then
        STATUS_NEEDS="${STATUS_NEEDS}${C_NEEDS_PUSH}Needs push($NEEDS_PUSH_BRANCHES)${C_RESET} "
    fi
    if [ "$STATUS_NEEDS" = "" ]; then
        STATUS_NEEDS="${STATUS_NEEDS}${C_OK}Ok${C_RESET} "
    fi

    # Print the output
    printf "$STATUS_NEEDS\n"
done
